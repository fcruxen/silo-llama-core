{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/CrvEthTriCrvPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike256WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary CrvEthTriCrvPoolLib {\n    uint256 constant public WETH_INDEX = 1;\n    uint256 constant public CRV_INDEX = 2;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function crvToWethViaTriCrv(uint256 _amount, address _pool, IERC20 _crv) internal returns (uint256 receivedWeth) {\n        _crv.approve(_pool, _amount);\n\n        receivedWeth = ICurvePoolLike256WithReturn(_pool).exchange(\n            CRV_INDEX,\n            WETH_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function wethToCrvViaTriCrv(uint256 _amount, address _pool, IERC20 _weth) internal returns (uint256 receivedCrv) {\n        _weth.approve(_pool, _amount);\n\n        receivedCrv = ICurvePoolLike256WithReturn(_pool).exchange(\n            WETH_INDEX,\n            CRV_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/crvViaTriCrv/CrvViaTriCrvMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../_common/libraries/CrvEthTriCrvPoolLib.sol\";\nimport \"../interfaces/IMagician.sol\";\n\ninterface ICrvPoolLike {\n    // solhint-disable func-name-mixedcase\n    function get_dx(uint256 i, uint256 j, uint256 dy) external view returns (uint256);\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n}\n\n/// @dev CRV Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract CrvViaTriCrvMagician is IMagician {\n    using CrvEthTriCrvPoolLib for uint256;\n\n    // solhint-disable var-name-mixedcase\n    address immutable public TRI_CRV_POOL;\n\n    IERC20 immutable public WETH;\n    IERC20 immutable public CRV;\n    // solhint-enable var-name-mixedcase\n\n    error InvalidAsset();\n\n    constructor(\n        address _triCrvPool,\n        address _weth,\n        address _crv\n    ) {\n        TRI_CRV_POOL = _triCrvPool;\n        WETH = IERC20(_weth);\n        CRV = IERC20(_crv);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _crvToSell)\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        // CRV -> WETH\n        if (_asset != address(CRV)) revert InvalidAsset();\n\n        amountOut = _crvToSell.crvToWethViaTriCrv(TRI_CRV_POOL, CRV);\n\n        tokenOut = address(WETH);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _crvToBuy)\n        external\n        virtual\n        returns (address tokenOut, uint256 wethIn)\n    {\n        // WETH -> CRV\n        if (_asset != address(CRV)) revert InvalidAsset();\n\n        wethIn = _getDx(_crvToBuy);\n\n        uint256 expectedCrv = ICrvPoolLike(TRI_CRV_POOL).get_dy(\n            CrvEthTriCrvPoolLib.WETH_INDEX,\n            CrvEthTriCrvPoolLib.CRV_INDEX,\n            wethIn\n        );\n\n        // get_dx returns such a WETH amount that when we will do an exchange,\n        // we receive ~0.0001% less than we need for the liquidation. It is dust,\n        // the liquidation will fail as we need to repay the exact amount.\n        // To compensate for this, we will increase WETH a little bit.\n        // It is fine if we will buy ~0.0001% more.\n        if (expectedCrv < _crvToBuy) {\n            uint256 oneCrv = 1e18;\n\n            uint256 wethForOneCrv = ICrvPoolLike(TRI_CRV_POOL).get_dy(\n                CrvEthTriCrvPoolLib.CRV_INDEX,\n                CrvEthTriCrvPoolLib.WETH_INDEX,\n                oneCrv\n            );\n\n            // it is impossible that we will need to spend ETH close to uint256 max\n            unchecked { wethIn += wethForOneCrv / 1e3; }\n        }\n\n        wethIn.wethToCrvViaTriCrv(TRI_CRV_POOL, WETH);\n\n        tokenOut = address(CRV);\n    }\n\n    function _getDx(uint256 _crvToBuy) internal view returns (uint256 wethIn) {\n        return ICrvPoolLike(TRI_CRV_POOL).get_dx(\n            CrvEthTriCrvPoolLib.WETH_INDEX,\n            CrvEthTriCrvPoolLib.CRV_INDEX,\n            _crvToBuy\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/crvViaTriCrv/CrvViaTriCrvMagicianETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CrvViaTriCrvMagician.sol\";\n\n/// @dev CRV Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CrvViaTriCrvMagicianETH is CrvViaTriCrvMagician {\n    constructor() CrvViaTriCrvMagician(\n        0x4eBdF703948ddCEA3B11f675B4D1Fba9d2414A14, // TRI_CRV_POOL\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\n        0xD533a949740bb3306d119CC777fa900bA034cd52  // CRV\n    ) {}\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolLike256WithReturn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICurvePoolLike256WithReturn {\n    // solhint-disable func-name-mixedcase\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external returns (uint256);\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n    // solhint-enable func-name-mixedcase\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9.0;\n\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\ninterface IMagician {\n    /// @notice Operates to unwrap an `_asset`\n    /// @param _asset Asset to be unwrapped\n    /// @param _amount Amount of the `_asset`\n    /// @return tokenOut A token that the `_asset` has been converted to\n    /// @return amountOut Amount of the `tokenOut` that we received\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\n\n    /// @notice Performs operation opposit to `towardsNative`\n    /// @param _asset Asset to be wrapped\n    /// @param _amount Amount of the `_asset`\n    /// @return tokenOut A token that the `_asset` has been converted to\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}