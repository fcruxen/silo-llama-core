{
  "address": "0x2375EBa92e1b7ace8585AE7e2d23feDc10887493",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedNormalization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalculationResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CRV_USD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_USD_USDT_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRICRYPTO_2_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_crvUsdToBuy",
          "type": "uint256"
        }
      ],
      "name": "towardsAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wehtIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_crvUsdToSell",
          "type": "uint256"
        }
      ],
      "name": "towardsNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79313070e1b3bc8745844bdef538880a0c898d1fc03295ba63a889d6eb556051",
  "receipt": {
    "to": null,
    "from": "0x6d228Fa4daD2163056A48Fc2186d716f5c65E89A",
    "contractAddress": "0x2375EBa92e1b7ace8585AE7e2d23feDc10887493",
    "transactionIndex": 88,
    "gasUsed": "971568",
    "logsBloom": "0x
    "blockHash": "0xca30131413a63d824c07e1eb6a349e9eaacc7d89db318f3d04cbb7a46cacbf01",
    "transactionHash": "0x79313070e1b3bc8745844bdef538880a0c898d1fc03295ba63a889d6eb556051",
    "logs": [],
    "blockNumber": 17812296,
    "cumulativeGasUsed": "6366644",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7e0356c2317fa1981abff500b7db5ab7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedNormalization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalculationResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CRV_USD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_USD_USDT_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRICRYPTO_2_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crvUsdToBuy\",\"type\":\"uint256\"}],\"name\":\"towardsAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wehtIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crvUsdToSell\",\"type\":\"uint256\"}],\"name\":\"towardsNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"crvUSD Magician IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\",\"kind\":\"dev\",\"methods\":{\"towardsAsset(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be wrapped\"},\"returns\":{\"tokenOut\":\"A token that the `_asset` has been converted to\",\"wehtIn\":\"Amount of the quote token that we spent to get `_amoun` of the `_asset`\"}},\"towardsNative(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be unwrapped\"},\"returns\":{\"amountOut\":\"Amount of the `tokenOut` that we received\",\"tokenOut\":\"A token that the `_asset` has been converted to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"towardsAsset(address,uint256)\":{\"notice\":\"Performs operation opposit to `towardsNative`\"},\"towardsNative(address,uint256)\":{\"notice\":\"Operates to unwrap an `_asset`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/magicians/CrvUSDMagicianETH.sol\":\"CrvUSDMagicianETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/CrvUSDMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IMagician.sol\\\";\\nimport \\\"./_common/libraries/UsdtCrvUsdPoolLib.sol\\\";\\nimport \\\"./_common/libraries/UsdtWethTricrypto2Lib.sol\\\";\\nimport \\\"./_common/libraries/CalculateAmountIn256Lib.sol\\\";\\n\\ninterface ICrvUSDPoolLike {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(int128 i, int128 j, uint256 dy) external view returns (uint256);\\n}\\n\\n/// @dev crvUSD Magician\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nabstract contract CrvUSDMagician is IMagician {\\n    using UsdtCrvUsdPoolLib for uint256;\\n    using UsdtWethTricrypto2Lib for uint256;\\n    using CalculateAmountIn256Lib for uint256;\\n\\n    error InvalidAsset();\\n    error InvalidCalculationResult();\\n\\n    // solhint-disable var-name-mixedcase\\n    address immutable public TRICRYPTO_2_POOL;\\n    address immutable public CRV_USD_USDT_POOL;\\n\\n    IERC20 immutable public WETH;\\n    IERC20 immutable public USDT;\\n    IERC20 immutable public CRV_USD;\\n    // solhint-enable var-name-mixedcase\\n\\n    constructor(\\n        address _tricrypto2Pool,\\n        address _crvUsdPool,\\n        address _weth,\\n        address _usdt,\\n        address _crvUsd\\n    ) {\\n        TRICRYPTO_2_POOL = _tricrypto2Pool;\\n        CRV_USD_USDT_POOL = _crvUsdPool;\\n        WETH = IERC20(_weth);\\n        USDT = IERC20(_usdt);\\n        CRV_USD = IERC20(_crvUsd);\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsNative(address _asset, uint256 _crvUsdToSell)\\n        external\\n        virtual\\n        returns (address tokenOut, uint256 amountOut)\\n    {\\n        // crvUSD -> WETH\\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\\n\\n        amountOut = _crvUsdToSell.crvUsdToUsdt(CRV_USD_USDT_POOL, CRV_USD)\\n            .usdtToWethTricrypto2(TRICRYPTO_2_POOL, USDT, WETH);\\n\\n        tokenOut = address(WETH);\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsAsset(address _asset, uint256 _crvUsdToBuy)\\n        external\\n        virtual\\n        returns (address tokenOut, uint256 wehtIn)\\n    {\\n        // WETH -> crvUSD\\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\\n\\n        uint256 usdtIn = ICrvUSDPoolLike(CRV_USD_USDT_POOL).get_dx(\\n            UsdtCrvUsdPoolLib.USDT_INDEX,\\n            UsdtCrvUsdPoolLib.CRV_USD_INDEX,\\n            _crvUsdToBuy\\n        );\\n\\n        uint256 usdtOut;\\n        (wehtIn, usdtOut) = _calcRequiredWETH(usdtIn);\\n\\n        if (usdtOut < usdtIn) revert InvalidCalculationResult();\\n\\n        wehtIn.wethToUsdtTricrypto2(TRICRYPTO_2_POOL, USDT, WETH)\\n            .usdtToCrvUsd(CRV_USD_USDT_POOL, USDT);\\n\\n        tokenOut = address(CRV_USD);\\n    }\\n\\n    function _calcRequiredWETH(uint256 usdtIn) internal virtual view returns (uint256 wehtIn, uint256 usdtOut) {\\n        uint256 oneWETH = 1e18;\\n\\n        CalculateAmountIn256Lib.InputWithNormalization memory input =\\n            CalculateAmountIn256Lib.InputWithNormalization({\\n                amountRequired: usdtIn,\\n                one: oneWETH,\\n                pool: TRICRYPTO_2_POOL,\\n                i: UsdtWethTricrypto2Lib.WETH_INDEX,\\n                j: UsdtWethTricrypto2Lib.USDT_INDEX,\\n                iDecimals: UsdtWethTricrypto2Lib.WETH_DECIMALS,\\n                jDecimals: UsdtWethTricrypto2Lib.USDT_DECIMALS\\n            });\\n\\n        return CalculateAmountIn256Lib.amountIn256WithNormalization(input);\\n    }\\n}\\n\",\"keccak256\":\"0x891c04809954bd7ba6c0801ef0304b859f2fc61fd8524baaeac090eceebb29c8\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/CrvUSDMagicianETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./CrvUSDMagician.sol\\\";\\n\\n/// @dev crvUSD Magician\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract CrvUSDMagicianETH is CrvUSDMagician {\\n    constructor() CrvUSDMagician(\\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46, // TRICRYPTO_2_POOL\\n        0x390f3595bCa2Df7d23783dFd126427CCeb997BF4, // CRV_USD_USDT_POOL\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7, // USDT\\n        0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E  // CRV_USD\\n    ) {}\\n}\\n\",\"keccak256\":\"0x6cce5b9aa47d393db80ef1c56e885ed6d2df518618c839e07ed493db13acae31\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/CalculateAmountIn256Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/ICurvePoolLike256.sol\\\";\\n\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary CalculateAmountIn256Lib {\\n    struct InputWithNormalization {\\n        uint256 amountRequired;\\n        uint256 one;\\n        address pool;\\n        uint256 i;\\n        uint256 j;\\n        uint256 iDecimals;\\n        uint256 jDecimals;\\n    }\\n\\n    error FailedNormalization();\\n\\n    function amountIn256(\\n        uint256 _amountRequired,\\n        uint256 _one, // One coin based on the coin decimals\\n        address _pool,\\n        uint256 _i,\\n        uint256 _j\\n    )\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        ICurvePoolLike256 curvePool = ICurvePoolLike256(_pool);\\n        uint256 rate = curvePool.get_dy(_i, _j, _one);\\n\\n        uint256 multiplied = _one * _amountRequired;\\n        // We have safe math while doing `one * _amountRequired`. Division should be fine.\\n        unchecked { amountIn = multiplied / rate; }\\n\\n        // `get_dy` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= _amountRequired`.\\n        while (true) {\\n            amountOut = curvePool.get_dy(_i, _j, amountIn);\\n\\n            if (amountOut >= _amountRequired) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                _one,\\n                rate,\\n                _amountRequired,\\n                amountOut\\n            );\\n        }\\n    }\\n\\n    function amountIn256WithNormalization(InputWithNormalization memory _input)\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        ICurvePoolLike256 curvePool = ICurvePoolLike256(_input.pool);\\n        uint256 dy = curvePool.get_dy(_input.i, _input.j, _input.one);\\n        // We do normalization of the rate as we will recive from the `get_dy` a value with `_jDecimals`\\n        uint256 rate = normalizeWithDecimals(dy, _input.iDecimals, _input.jDecimals);\\n        // Normalize `_input.amountRequired` to `_iDecimals` as we will use it\\n        // for calculation of the `amountIn` value of the `_tokenIn`\\n        uint256 amountRequired = normalizeWithDecimals(_input.amountRequired, _input.iDecimals, _input.jDecimals);\\n        uint256 multiplied = _input.one * amountRequired;\\n        // Zero value for amountIn is unacceptable.\\n        assert(multiplied >= rate); // Otherwise, we may get zero.\\n        // We have safe math while doing `one * amountRequired`. Division should be fine.\\n        unchecked { amountIn = multiplied / rate; }\\n\\n        // `get_dy` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= amountRequired`.\\n        while (true) {\\n            amountOut = curvePool.get_dy(_input.i, _input.j, amountIn);\\n            uint256 amountOutNormalized = normalizeWithDecimals(amountOut, _input.iDecimals, _input.jDecimals);\\n\\n            if (amountOutNormalized >= amountRequired) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                _input.one,\\n                rate,\\n                amountRequired,\\n                amountOutNormalized\\n            );\\n        }\\n    }\\n\\n    /// @dev Adjusts the given value to have different decimals\\n    function normalizeWithDecimals(\\n        uint256 _value,\\n        uint256 _toDecimals,\\n        uint256 _fromDecimals\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_toDecimals == _fromDecimals) {\\n            return _value;\\n        } else if (_toDecimals < _fromDecimals) {\\n            uint256 devideOn;\\n            // It can be unchecked because of the condition `_toDecimals < _fromDecimals`.\\n            // We trust to `_fromDecimals` and `_toDecimals` they should not have large numbers.\\n            unchecked { devideOn = 10 ** (_fromDecimals - _toDecimals); }\\n            // Zero value after normalization is unacceptable.\\n            if (_value < devideOn) revert FailedNormalization();\\n            // Condition above make it safe\\n            unchecked { return _value / devideOn; }\\n        } else {\\n            uint256 decimalsDiff;\\n            // Because of the condition `_toDecimals < _fromDecimals` above,\\n            // we are safe as it guarantees that `_toDecimals` is > `_fromDecimals`\\n            unchecked { decimalsDiff = 10 ** (_toDecimals - _fromDecimals); }\\n\\n            return _value * decimalsDiff;\\n        }\\n    }\\n\\n    function _calcAmountIn(\\n        uint256 _amountIn,\\n        uint256 _one,\\n        uint256 _rate,\\n        uint256 _requiredAmountOut,\\n        uint256 _amountOutNormalized\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 diff;\\n        // Because of the condition `amountOutNormalized >= _requiredAmountOut` in a calling function,\\n        // safe math is not required here.\\n        unchecked { diff = _requiredAmountOut - _amountOutNormalized; }\\n        // We may be stuck in a situation where a difference between\\n        // a `_requiredAmountOut` and `amountOutNormalized`\\n        // will be small and we will need to perform more steps.\\n        // This expression helps to escape the almost infinite loop.\\n        if (diff < 1e3) {\\n            // If the `amountIn` value is high the `get_dy` function will revert first\\n            unchecked { _amountIn += 1e3; }\\n        } else {\\n            // `one * diff` is safe as `diff` will be lower then the `_requiredAmountOut`\\n            // for which we have safe math while doing `ONE_... * _requiredAmountOut` in a calling function.\\n            unchecked { _amountIn += (_one * diff) / _rate; }\\n        }\\n\\n        return _amountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x0d3aed53b852ea927beb81d345585b28c76af7f36e0cab1a2d06801d46d1aed5\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/UsdtCrvUsdPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdtCrvUsdPoolLib {\\n    using SafeERC20 for IERC20;\\n\\n    int128 constant public USDT_INDEX = 0;\\n    int128 constant public CRV_USD_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function crvUsdToUsdt(uint256 _amount, address _pool, IERC20 _crvUSD) internal returns (uint256 receivedUsdt) {\\n        _crvUSD.approve(_pool, _amount);\\n\\n        receivedUsdt = ICurvePoolLike128WithReturn(_pool).exchange(\\n            CRV_USD_INDEX,\\n            USDT_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function usdtToCrvUsd(uint256 _amount, address _pool, IERC20 _usdt) internal returns (uint256 receivedCrvUSD) {\\n        _usdt.safeApprove(_pool, _amount);\\n\\n        receivedCrvUSD = ICurvePoolLike128WithReturn(_pool).exchange(\\n            USDT_INDEX,\\n            CRV_USD_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb651fcdcb938dd834b2fac5a8eea016ffed20b1c76c81c92568def96e723dfdb\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/UsdtWethTricrypto2Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/ICurvePoolLike256.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdtWethTricrypto2Lib {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public USDT_INDEX = 0;\\n    uint256 constant public WETH_INDEX = 2;\\n\\n    uint256 constant public USDT_DECIMALS = 6;\\n    uint256 constant public WETH_DECIMALS = 18;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function usdtToWethTricrypto2(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _usdt,\\n        IERC20 _weth\\n    )\\n        internal\\n        returns (uint256 _received)\\n    {\\n        _usdt.safeApprove(_pool, _amount);\\n\\n        uint256 balanceBefore = _weth.balanceOf(address(this));\\n\\n        ICurvePoolLike256(_pool).exchange(\\n            USDT_INDEX,\\n            WETH_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n\\n        uint256 balanceAfter = _weth.balanceOf(address(this));\\n\\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\\n        unchecked { _received = balanceAfter - balanceBefore; }\\n    }\\n\\n    function wethToUsdtTricrypto2(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _usdt,\\n        IERC20 _weth\\n    )\\n        internal\\n        returns (uint256 _received)\\n    {\\n        _weth.approve(_pool, _amount);\\n\\n        uint256 balanceBefore = _usdt.balanceOf(address(this));\\n\\n        ICurvePoolLike256(_pool).exchange(\\n            WETH_INDEX,\\n            USDT_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n\\n        uint256 balanceAfter = _usdt.balanceOf(address(this));\\n\\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\\n        unchecked { _received = balanceAfter - balanceBefore; }\\n    }\\n}\\n\",\"keccak256\":\"0xfa4ff9e5a649c0d98173d89c47cf279c23040ba9c44d916b5f9cfce9f0b7bd9d\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike128WithReturn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike128WithReturn {\\n    // solhint-disable func-name-mixedcase\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 minDy) external returns (uint256);\\n    function exchange_underlying(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external returns (uint256);\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n    // solhint-enable func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x76678eaec7d80bcd814573eef3890219bc2b82e23c248730b3b3c686adb93f60\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike256 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06bcebb8b70b015b2664e41603f53f4d99356383b6e99e242939d7a02525c917\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/IMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\\ninterface IMagician {\\n    /// @notice Operates to unwrap an `_asset`\\n    /// @param _asset Asset to be unwrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the `tokenOut` that we received\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n\\n    /// @notice Performs operation opposit to `towardsNative`\\n    /// @param _asset Asset to be wrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xb48290785d1be3d5b1ed767ee628faa69ee7ded238de776d66b9e0795536ff50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b5073d51a44d3fae010294c616388b506acda1bfaae4660805273390f3595bca2df7d23783dfd126427cceb997bf460a05273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260c05273dac17f958d2ee523a2206206994597c13d831ec760e05273f939e0a03fb07f59a73314e73794be0e57ac1b4e6101005260805160a05160c05160e051610100516110a96101366000396000818161015e015281816101ac01528181610289015281816102e5015261049d01526000818161018501528181610222015261042801526000818161013701528181610243015281816102b7015261046f01526000818160fd015281816102680152818161035c01526104070152600081816087015281816102010152818161044d015261076001526110a96000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636ea477da1161005b5780636ea477da1461011f578063ad5c464814610132578063b10d3a1814610159578063c54e44eb1461018057600080fd5b80630a78b5231461008257806321ebbf01146100c6578063379fa8ba146100f8575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d4366004610f28565b6101a7565b604080516001600160a01b0390931683526020830191909152016100bd565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100d961012d366004610f28565b6102e0565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146101fc57604051636448d6e960e11b815260040160405180910390fd5b6102b57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006102ad877f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006104c7565b9291906105c8565b7f00000000000000000000000000000000000000000000000000000000000000009590945092505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461033557604051636448d6e960e11b815260040160405180910390fd5b6040516333ef816560e11b81526000600482018190526001602483015260448201859052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906367df02ca90606401602060405180830381865afa1580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf9190610f60565b905060006103dc82610735565b90935090508181101561040257604051632349714360e21b815260040160405180910390fd5b61049a7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610493867f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000006107bd565b9190610941565b507f0000000000000000000000000000000000000000000000000000000000000000935050509250929050565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610f79565b50604051630f7c084960e21b8152600160048201819052600060248301526044820186905260648201526001600160a01b03841690633df02124906084015b6020604051808303816000875af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610f60565b949350505050565b60006105de6001600160a01b0384168587610999565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106499190610f60565b604051630b68372160e31b8152600060048201526002602482015260448101889052600160648201529091506001600160a01b03861690635b41b90890608401600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a08231906024015b602060405180830381865afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190610f60565b919091039695505050505050565b6000806000670de0b6b3a7640000905060006040518060e001604052808681526020018381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600281526020016000815260200160128152602001600681525090506107b281610ada565b935093505050915091565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018690526000919083169063095ea7b3906044016020604051808303816000875af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610f79565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190610f60565b604051630b68372160e31b8152600260048201526000602482015260448101889052600160648201529091506001600160a01b03861690635b41b90890608401600060405180830381600087803b1580156108fa57600080fd5b505af115801561090e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03871691506370a08231906024016106e6565b60006109576001600160a01b0383168486610999565b604051630f7c084960e21b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690633df021249060840161057d565b801580610a135750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190610f60565b155b610a835760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610ad5908490610c9c565b505050565b604081810151606083015160808401516020850151935163556d6e9f60e01b815260048101929092526024820152604481019290925260009182919082906001600160a01b0383169063556d6e9f90606401602060405180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190610f60565b90506000610b84828760a001518860c00151610d6e565b90506000610b9f87600001518860a001518960c00151610d6e565b90506000818860200151610bb39190610f9b565b905082811015610bc557610bc5610fc8565b828181610bd457610bd4610fde565b0496505b6060880151608089015160405163556d6e9f60e01b815260048101929092526024820152604481018890526001600160a01b0386169063556d6e9f90606401602060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190610f60565b95506000610c6f878a60a001518b60c00151610d6e565b9050828110610c8357505050505050915091565b610c94888a60200151868685610de0565b975050610bd8565b6000610cf1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e1d9092919063ffffffff16565b805190915015610ad55780806020019051810190610d0f9190610f79565b610ad55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a7a565b6000818303610d7e575082610dd9565b81831015610dc557828203600a0a80851015610dad5760405163059e4a5960e11b815260040160405180910390fd5b808581610dbc57610dbc610fde565b04915050610dd9565b818303600a0a610dd58186610f9b565b9150505b9392505050565b60008183036103e8811015610dfb576103e887019650610e12565b8481870281610e0c57610e0c610fde565b04870196505b509495945050505050565b60606105c0848460008585843b610e765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a7a565b600080866001600160a01b03168587604051610e929190611024565b60006040518083038185875af1925050503d8060008114610ecf576040519150601f19603f3d011682016040523d82523d6000602084013e610ed4565b606091505b5091509150610ee4828286610eef565b979650505050505050565b60608315610efe575081610dd9565b825115610f0e5782518084602001fd5b8160405162461bcd60e51b8152600401610a7a9190611040565b60008060408385031215610f3b57600080fd5b82356001600160a01b0381168114610f5257600080fd5b946020939093013593505050565b600060208284031215610f7257600080fd5b5051919050565b600060208284031215610f8b57600080fd5b81518015158114610dd957600080fd5b6000816000190483118215151615610fc357634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60005b8381101561100f578181015183820152602001610ff7565b8381111561101e576000848401525b50505050565b60008251611036818460208701610ff4565b9190910192915050565b602081526000825180602084015261105f816040850160208701610ff4565b601f01601f1916919091016040019291505056fea26469706673582212205f279fbbc4c7fb7a5f11e6fb4db90aa199372e792d8f1c67ed09153867f66fa164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80636ea477da1161005b5780636ea477da1461011f578063ad5c464814610132578063b10d3a1814610159578063c54e44eb1461018057600080fd5b80630a78b5231461008257806321ebbf01146100c6578063379fa8ba146100f8575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d4366004610f28565b6101a7565b604080516001600160a01b0390931683526020830191909152016100bd565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100d961012d366004610f28565b6102e0565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146101fc57604051636448d6e960e11b815260040160405180910390fd5b6102b57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006102ad877f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006104c7565b9291906105c8565b7f00000000000000000000000000000000000000000000000000000000000000009590945092505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461033557604051636448d6e960e11b815260040160405180910390fd5b6040516333ef816560e11b81526000600482018190526001602483015260448201859052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906367df02ca90606401602060405180830381865afa1580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf9190610f60565b905060006103dc82610735565b90935090508181101561040257604051632349714360e21b815260040160405180910390fd5b61049a7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610493867f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000006107bd565b9190610941565b507f0000000000000000000000000000000000000000000000000000000000000000935050509250929050565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610f79565b50604051630f7c084960e21b8152600160048201819052600060248301526044820186905260648201526001600160a01b03841690633df02124906084015b6020604051808303816000875af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610f60565b949350505050565b60006105de6001600160a01b0384168587610999565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106499190610f60565b604051630b68372160e31b8152600060048201526002602482015260448101889052600160648201529091506001600160a01b03861690635b41b90890608401600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a08231906024015b602060405180830381865afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190610f60565b919091039695505050505050565b6000806000670de0b6b3a7640000905060006040518060e001604052808681526020018381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600281526020016000815260200160128152602001600681525090506107b281610ada565b935093505050915091565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018690526000919083169063095ea7b3906044016020604051808303816000875af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610f79565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190610f60565b604051630b68372160e31b8152600260048201526000602482015260448101889052600160648201529091506001600160a01b03861690635b41b90890608401600060405180830381600087803b1580156108fa57600080fd5b505af115801561090e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03871691506370a08231906024016106e6565b60006109576001600160a01b0383168486610999565b604051630f7c084960e21b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690633df021249060840161057d565b801580610a135750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190610f60565b155b610a835760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610ad5908490610c9c565b505050565b604081810151606083015160808401516020850151935163556d6e9f60e01b815260048101929092526024820152604481019290925260009182919082906001600160a01b0383169063556d6e9f90606401602060405180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190610f60565b90506000610b84828760a001518860c00151610d6e565b90506000610b9f87600001518860a001518960c00151610d6e565b90506000818860200151610bb39190610f9b565b905082811015610bc557610bc5610fc8565b828181610bd457610bd4610fde565b0496505b6060880151608089015160405163556d6e9f60e01b815260048101929092526024820152604481018890526001600160a01b0386169063556d6e9f90606401602060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190610f60565b95506000610c6f878a60a001518b60c00151610d6e565b9050828110610c8357505050505050915091565b610c94888a60200151868685610de0565b975050610bd8565b6000610cf1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e1d9092919063ffffffff16565b805190915015610ad55780806020019051810190610d0f9190610f79565b610ad55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a7a565b6000818303610d7e575082610dd9565b81831015610dc557828203600a0a80851015610dad5760405163059e4a5960e11b815260040160405180910390fd5b808581610dbc57610dbc610fde565b04915050610dd9565b818303600a0a610dd58186610f9b565b9150505b9392505050565b60008183036103e8811015610dfb576103e887019650610e12565b8481870281610e0c57610e0c610fde565b04870196505b509495945050505050565b60606105c0848460008585843b610e765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a7a565b600080866001600160a01b03168587604051610e929190611024565b60006040518083038185875af1925050503d8060008114610ecf576040519150601f19603f3d011682016040523d82523d6000602084013e610ed4565b606091505b5091509150610ee4828286610eef565b979650505050505050565b60608315610efe575081610dd9565b825115610f0e5782518084602001fd5b8160405162461bcd60e51b8152600401610a7a9190611040565b60008060408385031215610f3b57600080fd5b82356001600160a01b0381168114610f5257600080fd5b946020939093013593505050565b600060208284031215610f7257600080fd5b5051919050565b600060208284031215610f8b57600080fd5b81518015158114610dd957600080fd5b6000816000190483118215151615610fc357634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60005b8381101561100f578181015183820152602001610ff7565b8381111561101e576000848401525b50505050565b60008251611036818460208701610ff4565b9190910192915050565b602081526000825180602084015261105f816040850160208701610ff4565b601f01601f1916919091016040019291505056fea26469706673582212205f279fbbc4c7fb7a5f11e6fb4db90aa199372e792d8f1c67ed09153867f66fa164736f6c634300080d0033",
  "devdoc": {
    "details": "crvUSD Magician IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.",
    "kind": "dev",
    "methods": {
      "towardsAsset(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be wrapped"
        },
        "returns": {
          "tokenOut": "A token that the `_asset` has been converted to",
          "wehtIn": "Amount of the quote token that we spent to get `_amoun` of the `_asset`"
        }
      },
      "towardsNative(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be unwrapped"
        },
        "returns": {
          "amountOut": "Amount of the `tokenOut` that we received",
          "tokenOut": "A token that the `_asset` has been converted to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "towardsAsset(address,uint256)": {
        "notice": "Performs operation opposit to `towardsNative`"
      },
      "towardsNative(address,uint256)": {
        "notice": "Operates to unwrap an `_asset`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}